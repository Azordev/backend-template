{
  "setTimeout": {
    "prefix": "set",
    "body": "setTimeout(() => {\n\t${0}\n}, ${1:delay})"
  },
  "setInterval": {
    "prefix": "seti",
    "body": "setInterval(() => {\n\t${0}\n}, ${1:delay})"
  },
  "setImmediate": {
    "prefix": "sim",
    "body": "setImmediate(() => {\n\t${0}\n})"
  },
  "await": {
    "prefix": "aw",
    "body": "await ${0}"
  },
  "await Promise.all": {
    "prefix": "apa",
    "body": "await Promise.all(${1:value})"
  },
  "await sleep": {
    "prefix": "setT",
    "body": "await new Promise((r) => setTimeout(r, ${0}))"
  },
  "Node callback": {
    "prefix": "cb",
    "body": "function (err, ${1:value}) {\n\tif (err) throw err\n\t${0}\n}"
  },
  "process.env": {
    "prefix": "proc",
    "body": "process.env"
  },
  "Promise.all": {
    "prefix": "proa",
    "body": "Promise.all(${1:value})"
  },
  "Promise.resolve": {
    "prefix": "prore",
    "body": "Promise.resolve(${1:value})"
  },
  "Promise.reject": {
    "prefix": "pror",
    "body": "Promise.reject(${1:value})"
  },
  "Promise": {
    "prefix": "p",
    "body": "Promise"
  },
  "new Promise": {
    "prefix": "newp",
    "body": "new Promise((resolve, reject) => {\n\t${0}\n})"
  },
  "Promise.then": {
    "prefix": "then",
    "body": "${1:promise}.then((${2:value}) => {\n\t${0}\n})"
  },
  "Promise.catch": {
    "prefix": "catch",
    "body": "${1:promise}.catch(error => {\n\t${0}\n})"
  },
  "describe": {
    "prefix": "desc",
    "body": "describe('${1:description}', () => {\n\t${0}\n})"
  },
  "it asynchronous": {
    "prefix": "it",
    "body": "it('${1:description}', async () => {\n\t${0}\n})"
  },
  "it.todo": {
    "prefix": "itt",
    "body": "it.todo('${1:description}')"
  },
  "it with a callback": {
    "prefix": "itd",
    "body": "it('${1:description}', (done) => {\n\t${0}\n})"
  },
  "it synchronous": {
    "prefix": "its",
    "body": "it('${1:description}', () => {\n\t${0}\n})"
  },
  "before": {
    "prefix": "befa",
    "body": "before(async () => {\n\t${0}\n})"
  },
  "beforeAll": {
    "prefix": "befal",
    "body": "beforeAll(async () => {\n\t${0}\n})"
  },
  "beforeEach": {
    "prefix": "befE",
    "body": "beforeEach(async () => {\n\t${0}\n})"
  },
  "after": {
    "prefix": "aft",
    "body": "after(() => {\n\t${0}\n})"
  },
  "afterEach": {
    "prefix": "aftE",
    "body": "afterEach(() => {\n\t${0}\n})"
  },
  "require": {
    "prefix": "req",
    "body": "require('${1:module}')"
  },
  "const module = require('module')": {
    "prefix": "requC",
    "body": "const ${1:module} = require('${1:module}')"
  },
  "exports.member": {
    "prefix": "expo",
    "body": "exports.${1:member} = ${2:value}"
  },
  "module.exports": {
    "prefix": "modu",
    "body": "module.exports = ${1:name}"
  },
  "event handler": {
    "prefix": "on",
    "body": "${1:emitter}.on('${2:event}', (${3:arguments}) => {\n\t${0}\n})"
  },
  "dom event cancel default and propagation": {
    "prefix": "evc",
    "body": "ev.preventDefault()\nev.stopPropagation()\nreturn false"
  },
  "addEventListener": {
    "prefix": "addL",
    "body": "${1:document}.addEventListener('${2:event}', ${3:ev} => {\n\t${0}\n})"
  },
  "removeEventListener": {
    "prefix": "remo",
    "body": "${1:document}.removeEventListener('${2:event}', ${3:listener})"
  },
  "getElementById": {
    "prefix": "getI",
    "body": "${1:document}.getElementById('${2:id}')"
  },
  "getElementsByClassName": {
    "prefix": "getC",
    "body": "Array.from(${1:document}.getElementsByClassName('${2:class}'))"
  },
  "getElementsByTagName": {
    "prefix": "getT",
    "body": "Array.from(${1:document}.getElementsByTagName('${2:tag}'))"
  },
  "querySelector": {
    "prefix": "quer",
    "body": "${1:document}.querySelector('${2:selector}')"
  },
  "querySelectorAll": {
    "prefix": "queryA",
    "body": "Array.from(${1:document}.querySelectorAll('${2:selector}'))"
  },
  "createDocumentFragment": {
    "prefix": "creaDF",
    "body": "${1:document}.createDocumentFragment(${2:elem})"
  },
  "createElement": {
    "prefix": "creaE",
    "body": "${1:document}.createElement(${2:elem})"
  },
  "classList.add": {
    "prefix": "claa",
    "body": "${1:el}.classList.add('${2:class}')"
  },
  "classList.remove": {
    "prefix": "clasr",
    "body": "${1:el}.classList.remove('${2:class}')"
  },
  "classList.toggle": {
    "prefix": "clast",
    "body": "${1:el}.classList.toggle('${2:class}')"
  },
  "getAttribute": {
    "prefix": "geta",
    "body": "${1:el}.getAttribute('${2:attr}')"
  },
  "removeAttribute": {
    "prefix": "remova",
    "body": "${1:el}.removeAttribute('${2:attr}')"
  },
  "setAttribute": {
    "prefix": "seta",
    "body": "${1:el}.setAttribute('${2:attr}', ${3:value})"
  },
  "appendChild": {
    "prefix": "appen",
    "body": "${1:el}.appendChild(${2:elem})"
  },
  "removeChild": {
    "prefix": "remov",
    "body": "${1:el}.removeChild(${2:elem})"
  },
  "forEach loop": {
    "prefix": "forE",
    "body": "${1:iterable}.forEach((${2:item}) => {\n\t${0}\n})"
  },
  "map": {
    "prefix": "map",
    "body": "${1:iterable}.map((${2:item}) => {\n\t${0}\n})"
  },
  "reduce": {
    "prefix": "reduce",
    "body": "${1:iterable}.reduce((${2:previous}, ${3:current}) => {\n\t${0}\n}${4:, initial})"
  },
  "filter": {
    "prefix": "filter",
    "body": "${1:iterable}.filter((${2:item}) => {\n\t${0}\n})"
  },
  "find": {
    "prefix": "find",
    "body": "${1:iterable}.find((${2:item}) => {\n\t${0}\n})"
  },
  "every": {
    "prefix": "every",
    "body": "${1:iterable}.every((${2:item}) => {\n\t${0}\n})"
  },
  "some": {
    "prefix": "some",
    "body": "${1:iterable}.some((${2:item}) => {\n\t${0}\n})"
  },
  "var statement": {
    "prefix": "v",
    "body": "var ${1:name}"
  },
  "var assignment": {
    "prefix": "va",
    "body": "var ${1:name} = ${2:value}"
  },
  "let statement": {
    "prefix": "le",
    "body": "let ${1:name}"
  },
  "const statement": {
    "prefix": "co",
    "body": "const ${1:name}"
  },
  "const statement from destructuring": {
    "prefix": "coo",
    "body": "const { ${2:prop} } = ${1:value}"
  },
  "const statement from array destructuring": {
    "prefix": "coa",
    "body": "const [ ${2:prop} ] = ${1:value}"
  },
  "const assignment awaited": {
    "prefix": "cona",
    "body": "const ${1:name} = await ${2:value}"
  },
  "const destructuring assignment awaited": {
    "prefix": "consaw",
    "body": "const { ${1:name} } = await ${2:value}"
  },
  "const arrow function assignment": {
    "prefix": "consar",
    "body": "const ${1:name} = (${2:arguments}) => {\n\treturn ${0}\n}"
  },
  "let assignment awaited": {
    "prefix": "leta",
    "body": "let ${1:name} = await ${2:value}"
  },
  "const object": {
    "prefix": "consa",
    "body": "const ${1:name} = {\n\t${0}\n}"
  },
  "const array": {
    "prefix": "consa",
    "body": "const ${1:name} = [\n\t${0}\n]"
  },
  "generate array of integers starting with 1": {
    "prefix": "Arr",
    "body": "Array.from({ length: ${1:length} }, (v, k) => k + 1)"
  },
  "generate array of integers starting with 0": {
    "prefix": "[.",
    "body": "[...Array(${1:length}).keys()]"
  },
  "class": {
    "prefix": "cla",
    "body": "class ${1:name} {\n\tconstructor (${2:arguments}) {\n\t\t${0}\n\t}\n}"
  },
  "class extends": {
    "prefix": "clasx",
    "body": "class ${1:name} extends ${2:base} {\n\tconstructor (${3:arguments}) {\n\t\tsuper(${3:arguments})\n\t\t${0}\n\t}\n}"
  },
  "module export": {
    "prefix": "ex",
    "body": "export ${1:member}"
  },
  "module export const": {
    "prefix": "exp",
    "body": "export const ${1:member} = ${2:value}"
  },
  "module default export": {
    "prefix": "expo",
    "body": "export default ${1:member}"
  },
  "module default export function": {
    "prefix": "expof",
    "body": "export default function ${1:name} (${2:arguments}) {\n\t${0}\n}"
  },
  "import module": {
    "prefix": "imp",
    "body": "import ${2:*} from '${1:module}'"
  },
  "import module as": {
    "prefix": "impas",
    "body": "import ${2:*} as ${3:name} from '${1:module}'"
  },
  "import module destructured": {
    "prefix": "impf",
    "body": "import {$2} from '${1:module}'"
  },
  "typeof": {
    "prefix": "typeof",
    "body": "typeof ${1:source} === '${2:undefined}'"
  },
  "this": {
    "prefix": "thi",
    "body": "this."
  },
  "instanceof": {
    "prefix": "inst",
    "body": "${1:source} instanceof ${2:Object}"
  },
  "Array.isArray()": {
    "prefix": "isA",
    "body": "Array.isArray(${1:source})"
  },
  "if statement": {
    "prefix": "if",
    "body": "if (${1:condition}) {\n\t${0}\n}"
  },
  "else statement": {
    "prefix": "el",
    "body": "else {\n\t${0}\n}"
  },
  "if/else statement": {
    "prefix": "ifel",
    "body": "if (${1:condition}) {\n\t${0}\n} else {\n\t\n}"
  },
  "else if statement": {
    "prefix": "els",
    "body": "else if (${1:condition}) {\n\t${0}\n}"
  },
  "for loop": {
    "prefix": "for",
    "body": "for (let ${1:i} = 0, ${2:len} = ${3:iterable}.length; ${1:i} < ${2:len}; ${1:i}++) {\n\t${0}\n}"
  },
  "for in loop": {
    "prefix": "forin",
    "body": "for (let ${1:key} in ${2:source}) {\n\tif (${2:source}.hasOwnProperty(${1:key})) {\n\t\t${0}\n\t}\n}"
  },
  "for of loop": {
    "prefix": "forof",
    "body": "for (const ${1:key} of ${2:source}) {\n\t${0}\n}"
  },
  "while loop": {
    "prefix": "whil",
    "body": "while (${1:condition}) {\n\t${0}\n}"
  },
  "throw new Error": {
    "prefix": "thr",
    "body": "throw new ${0:error}"
  },
  "try/catch": {
    "prefix": "try",
    "body": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n}"
  },
  "try/catch/finally": {
    "prefix": "tryf",
    "body": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n} finally {\n\t\n}"
  },
  "named function": {
    "prefix": "fun",
    "body": "function ${1:name} (${2:arguments}) {\n\t${0}\n}"
  },
  "immediately-invoked function expression": {
    "prefix": "iife",
    "body": ";(function (${1:arguments}) {\n\t${0}\n})(${2})"
  },
  "arrow function": {
    "prefix": "arrow",
    "body": "(${1:arguments}) => ${2:statement}"
  },
  "arrow function with destructuring returning destructured": {
    "prefix": "({",
    "body": "({${1:arguments}}) => ${1:arguments}"
  },
  "arrow function with return": {
    "prefix": "arrow",
    "body": "(${1:arguments}) => {\n\treturn ${0}\n}"
  },
  "console.log": {
    "prefix": "conso",
    "body": "console.log(${0})"
  },
  "console.log a variable": {
    "prefix": "log",
    "body": "console.log('${0}:', ${0})"
  },
  "console.error": {
    "prefix": "error",
    "body": "console.error(${0})"
  },
  "console.warn": {
    "prefix": "warn",
    "body": "console.warn(${0})"
  },
  "console.dir": {
    "prefix": "dir",
    "body": "console.dir('${0}:', ${0})"
  },
  "constructor": {
    "prefix": "constr",
    "body": "constructor () {\n\t${0}\n}"
  },
  "JSON.stringify()": {
    "prefix": "stringi",
    "body": "JSON.stringify($0)"
  },
  "JSON.parse()": {
    "prefix": "pars",
    "body": "JSON.parse($0)"
  },
  "method": {
    "prefix": "method",
    "body": "${1:method} (${2:arguments}) {\n\t${0}\n}"
  },
  "ternary": {
    "prefix": "? :",
    "body": "${1:cond} ? ${2:true} : ${3:false}"
  },
  "Object.defineProperty": {
    "prefix": "defin",
    "body": "Object.defineProperty(${1:dest}, '${2:prop}', {\n\t${0}\n})"
  },
  "Object.keys": {
    "prefix": "key",
    "body": "Object.keys(${1:obj})"
  },
  "Object.values": {
    "prefix": "valu",
    "body": "Object.values(${1:obj})"
  },
  "Object.entries": {
    "prefix": "entr",
    "body": "Object.entries(${1:obj})"
  },
  "return": {
    "prefix": "ret",
    "body": "return ${0}"
  },
  "yield": {
    "prefix": "yie",
    "body": "yield ${0}"
  },
  "wrap selection in arrow function": {
    "prefix": "wrap selection in arrow function",
    "body": "() => {\n\t{$TM_SELECTED_TEXT}\n}",
    "description": "wraps text in arrow function"
  },
  "wrap selection in async arrow function": {
    "prefix": "wrap selection in async arrow function",
    "body": "async () => {\n\t{$TM_SELECTED_TEXT}\n}",
    "description": "wraps text in arrow function"
  }
}
